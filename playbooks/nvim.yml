---
- name: Setup neovim
  hosts: all
  tags: nvim
  vars:
    golang_tar: "go{{ golang_version }}.linux-amd64.tar"
  tasks:
    - name: Download nvim
      get_url:
        url: https://github.com/neovim/neovim/releases/download/v{{ nvim_version }}/nvim-linux-x86_64.tar.gz
        dest: "{{ inventory_dir }}/tarballs/nvim-linux-x86_64.tar"
        mode: "0644"

    - name: Extract nvim
      unarchive:
        src: "{{ inventory_dir }}/tarballs/nvim-linux-x86_64.tar"
        dest: "{{ inventory_dir }}/tarballs"
        remote_src: true

    - name: Link nvim installation
      file:
        src: "{{ inventory_dir }}/tarballs/nvim-linux-x86_64/bin/nvim"
        dest: "{{ ansible_env.HOME }}/.local/bin/nvim"
        state: link

    - name: Clone nvim-config
      git:
        repo: https://github.com/bagge/nvim-config.git
        dest: "{{ inventory_dir }}/repos/nvim-config"

    - name: Link nvim config
      file:
        src: "{{ inventory_dir }}/repos/nvim-config"
        dest: "{{ ansible_env.HOME }}/.config/nvim"
        state: link

    - name: Install packages used by nvim
      become: true
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - ansible-lint
        - wl-clipboard
        - ripgrep
        - curl

    - name: Do tool installation in nvim
      shell: >
        nvim --headless -c 'lua m = require("mason").setup()' \
                        -c 'MasonInstall shellcheck shfmt stylua gopls gofumpt' \
                        -c 'MasonInstall goimports lua-language-server' \
                        -c 'MasonInstall ansible-language-server bzl' \
                        -c 'MasonInstall bash-language-server efm' \
                        -c 'qall'
      args:
        executable: /bin/bash
        chdir: "{{ ansible_env.HOME }}"
        creates: "{{ ansible_env.HOME }}/.local/share/nvim/mason/bin/shellcheck"

    - name: Set nvim as default editor for git
      community.general.git_config:
        name: core.editor
        scope: global
        value: nvim

    - name: Install nvm # noqa command-instead-of-module risky-shell-pipe
      become: false
      shell: >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | PROFILE=/dev/null bash
      args:
        executable: /bin/bash
        chdir: "{{ ansible_env.HOME }}"
        creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

    - name: Install Node.js
      shell: ". {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install 20"
      args:
        creates: "{{ ansible_env.HOME }}/.nvm/versions/node"
        chdir: "{{ ansible_env.HOME }}"
        executable: /bin/bash

    - name: Enable nvm bashrc snippet
      file:
        src: "{{ inventory_dir }}/bashrc.d/{{ item }}"
        dest: "{{ inventory_dir }}/bashrc.d/enabled/{{ item }}"
        state: link
      with_items:
        - "006-nvm.bashrc"

    - name: Download golang
      get_url:
        url: https://golang.org/dl/{{ golang_tar }}.gz
        dest: "{{ inventory_dir }}/tarballs/{{ golang_tar }}"
        mode: "0644"

    - name: Extract golang
      unarchive:
        src: "{{ inventory_dir }}/tarballs/{{ golang_tar }}"
        dest: "{{ inventory_dir }}/tarballs"
        remote_src: true

    - name: Enable golang bashrc snippet
      file:
        src: "{{ inventory_dir }}/bashrc.d/{{ item }}"
        dest: "{{ inventory_dir }}/bashrc.d/enabled/{{ item }}"
        state: link
      with_items:
        - "007-golang.bashrc"
